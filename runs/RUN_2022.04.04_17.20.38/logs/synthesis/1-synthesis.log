
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.12+45 (git sha1 UNKNOWN, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/MULTI_32bit/src/MULTI_32bit.v
Parsing SystemVerilog input from `/openlane/designs/MULTI_32bit/src/MULTI_32bit.v' to AST representation.
Generating RTLIL representation for module `\MULTI_32bit'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/MULTI_32bit/runs/RUN_2022.04.04_17.20.38/tmp/synthesis/hierarchy.dot'.
Dumping module MULTI_32bit to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \MULTI_32bit

3.2. Analyzing design hierarchy..
Top module:  \MULTI_32bit
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \MULTI_32bit

5.1.2. Analyzing design hierarchy..
Top module:  \MULTI_32bit
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 26 switch rules as full_case in process $proc$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:35$2 in module MULTI_32bit.
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 14 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\MULTI_32bit.$proc$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:0$113'.
  Set init value: \P1 = 63'000000000000000000000000000000000000000000000000000000000000000
  Set init value: \P2 = 67'0000000000000000000000000000000000000000000000000000000000000000000
  Set init value: \P3 = 0

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULTI_32bit.$proc$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:0$113'.
Creating decoders for process `\MULTI_32bit.$proc$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:35$2'.
     1/52: $26\P3[31:1] [30:23]
     2/52: $26\P3[31:1] [22:0]
     3/52: $25\P3[31:1] [30:23]
     4/52: $25\P3[31:1] [22:0]
     5/52: $24\P3[31:1] [30:23]
     6/52: $24\P3[31:1] [22:0]
     7/52: $23\P3[31:1] [30:23]
     8/52: $23\P3[31:1] [22:0]
     9/52: $22\P3[31:1] [30:23]
    10/52: $22\P3[31:1] [22:0]
    11/52: $21\P3[31:1] [30:23]
    12/52: $21\P3[31:1] [22:0]
    13/52: $20\P3[31:1] [30:23]
    14/52: $20\P3[31:1] [22:0]
    15/52: $19\P3[31:1] [30:23]
    16/52: $19\P3[31:1] [22:0]
    17/52: $18\P3[31:1] [30:23]
    18/52: $18\P3[31:1] [22:0]
    19/52: $17\P3[31:1] [30:23]
    20/52: $17\P3[31:1] [22:0]
    21/52: $16\P3[31:1] [30:23]
    22/52: $16\P3[31:1] [22:0]
    23/52: $15\P3[31:1] [30:23]
    24/52: $15\P3[31:1] [22:0]
    25/52: $14\P3[31:1] [30:23]
    26/52: $14\P3[31:1] [22:0]
    27/52: $13\P3[31:1] [30:23]
    28/52: $13\P3[31:1] [22:0]
    29/52: $12\P3[31:1] [30:23]
    30/52: $12\P3[31:1] [22:0]
    31/52: $11\P3[31:1] [30:23]
    32/52: $11\P3[31:1] [22:0]
    33/52: $10\P3[31:1] [30:23]
    34/52: $10\P3[31:1] [22:0]
    35/52: $9\P3[31:1] [30:23]
    36/52: $9\P3[31:1] [22:0]
    37/52: $8\P3[31:1] [30:23]
    38/52: $8\P3[31:1] [22:0]
    39/52: $7\P3[31:1] [30:23]
    40/52: $7\P3[31:1] [22:0]
    41/52: $6\P3[31:1] [30:23]
    42/52: $6\P3[31:1] [22:0]
    43/52: $5\P3[31:1] [30:23]
    44/52: $5\P3[31:1] [22:0]
    45/52: $4\P3[31:1] [30:23]
    46/52: $4\P3[31:1] [22:0]
    47/52: $3\P3[31:1] [30:23]
    48/52: $3\P3[31:1] [22:0]
    49/52: $2\P3[31:1] [30:23]
    50/52: $2\P3[31:1] [22:0]
    51/52: $1\P3[31:1] [30:23]
    52/52: $1\P3[31:1] [22:0]

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULTI_32bit.\F' using process `\MULTI_32bit.$proc$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:35$2'.
  created $dff cell `$procdff$2220' with positive edge clock.
Creating register for signal `\MULTI_32bit.\P1' using process `\MULTI_32bit.$proc$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:35$2'.
  created $dff cell `$procdff$2221' with positive edge clock.
Creating register for signal `\MULTI_32bit.\P2' using process `\MULTI_32bit.$proc$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:35$2'.
  created $dff cell `$procdff$2222' with positive edge clock.
Creating register for signal `\MULTI_32bit.\P3' using process `\MULTI_32bit.$proc$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:35$2'.
  created $dff cell `$procdff$2223' with positive edge clock.

5.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `MULTI_32bit.$proc$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:0$113'.
Found and cleaned up 26 empty switches in `\MULTI_32bit.$proc$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:35$2'.
Removing empty process `MULTI_32bit.$proc$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:35$2'.
Cleaned up 26 empty switches.

5.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.
<suppressed ~26 debug messages>

5.3. Executing FLATTEN pass (flatten design).

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.
<suppressed ~1 debug messages>

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..
Removed 0 unused cells and 789 unused wires.
<suppressed ~3 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module MULTI_32bit...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
<suppressed ~156 debug messages>
Removed a total of 52 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MULTI_32bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$1000.
    dead port 1/2 on $mux $procmux$1003.
    dead port 1/2 on $mux $procmux$1006.
    dead port 1/2 on $mux $procmux$1009.
    dead port 1/2 on $mux $procmux$1012.
    dead port 1/2 on $mux $procmux$1015.
    dead port 1/2 on $mux $procmux$1018.
    dead port 1/2 on $mux $procmux$1024.
    dead port 1/2 on $mux $procmux$1027.
    dead port 1/2 on $mux $procmux$1030.
    dead port 1/2 on $mux $procmux$1033.
    dead port 1/2 on $mux $procmux$1036.
    dead port 1/2 on $mux $procmux$1039.
    dead port 1/2 on $mux $procmux$1042.
    dead port 1/2 on $mux $procmux$1045.
    dead port 1/2 on $mux $procmux$1048.
    dead port 1/2 on $mux $procmux$1051.
    dead port 1/2 on $mux $procmux$1054.
    dead port 1/2 on $mux $procmux$1057.
    dead port 1/2 on $mux $procmux$1060.
    dead port 1/2 on $mux $procmux$1063.
    dead port 1/2 on $mux $procmux$1066.
    dead port 1/2 on $mux $procmux$1069.
    dead port 1/2 on $mux $procmux$1072.
    dead port 1/2 on $mux $procmux$1075.
    dead port 1/2 on $mux $procmux$1078.
    dead port 1/2 on $mux $procmux$1084.
    dead port 1/2 on $mux $procmux$1087.
    dead port 1/2 on $mux $procmux$1090.
    dead port 1/2 on $mux $procmux$1093.
    dead port 1/2 on $mux $procmux$1096.
    dead port 1/2 on $mux $procmux$1099.
    dead port 1/2 on $mux $procmux$1102.
    dead port 1/2 on $mux $procmux$1105.
    dead port 1/2 on $mux $procmux$1108.
    dead port 1/2 on $mux $procmux$1111.
    dead port 1/2 on $mux $procmux$1114.
    dead port 1/2 on $mux $procmux$1117.
    dead port 1/2 on $mux $procmux$1120.
    dead port 1/2 on $mux $procmux$1123.
    dead port 1/2 on $mux $procmux$1126.
    dead port 1/2 on $mux $procmux$1129.
    dead port 1/2 on $mux $procmux$1132.
    dead port 1/2 on $mux $procmux$1135.
    dead port 1/2 on $mux $procmux$1141.
    dead port 1/2 on $mux $procmux$1144.
    dead port 1/2 on $mux $procmux$1147.
    dead port 1/2 on $mux $procmux$1150.
    dead port 1/2 on $mux $procmux$1153.
    dead port 1/2 on $mux $procmux$1156.
    dead port 1/2 on $mux $procmux$1159.
    dead port 1/2 on $mux $procmux$1162.
    dead port 1/2 on $mux $procmux$1165.
    dead port 1/2 on $mux $procmux$1168.
    dead port 1/2 on $mux $procmux$1171.
    dead port 1/2 on $mux $procmux$1174.
    dead port 1/2 on $mux $procmux$1177.
    dead port 1/2 on $mux $procmux$118.
    dead port 1/2 on $mux $procmux$1180.
    dead port 1/2 on $mux $procmux$1183.
    dead port 1/2 on $mux $procmux$1186.
    dead port 1/2 on $mux $procmux$1189.
    dead port 1/2 on $mux $procmux$1192.
    dead port 1/2 on $mux $procmux$1198.
    dead port 1/2 on $mux $procmux$1201.
    dead port 1/2 on $mux $procmux$1204.
    dead port 1/2 on $mux $procmux$1207.
    dead port 1/2 on $mux $procmux$121.
    dead port 1/2 on $mux $procmux$1210.
    dead port 1/2 on $mux $procmux$1213.
    dead port 1/2 on $mux $procmux$1216.
    dead port 1/2 on $mux $procmux$1219.
    dead port 1/2 on $mux $procmux$1222.
    dead port 1/2 on $mux $procmux$1225.
    dead port 1/2 on $mux $procmux$1228.
    dead port 1/2 on $mux $procmux$1231.
    dead port 1/2 on $mux $procmux$1234.
    dead port 1/2 on $mux $procmux$1237.
    dead port 1/2 on $mux $procmux$124.
    dead port 1/2 on $mux $procmux$1240.
    dead port 1/2 on $mux $procmux$1243.
    dead port 1/2 on $mux $procmux$1246.
    dead port 1/2 on $mux $procmux$1252.
    dead port 1/2 on $mux $procmux$1255.
    dead port 1/2 on $mux $procmux$1258.
    dead port 1/2 on $mux $procmux$1261.
    dead port 1/2 on $mux $procmux$1264.
    dead port 1/2 on $mux $procmux$1267.
    dead port 1/2 on $mux $procmux$127.
    dead port 1/2 on $mux $procmux$1270.
    dead port 1/2 on $mux $procmux$1273.
    dead port 1/2 on $mux $procmux$1276.
    dead port 1/2 on $mux $procmux$1279.
    dead port 1/2 on $mux $procmux$1282.
    dead port 1/2 on $mux $procmux$1285.
    dead port 1/2 on $mux $procmux$1288.
    dead port 1/2 on $mux $procmux$1291.
    dead port 1/2 on $mux $procmux$1294.
    dead port 1/2 on $mux $procmux$1297.
    dead port 1/2 on $mux $procmux$130.
    dead port 1/2 on $mux $procmux$1300.
    dead port 1/2 on $mux $procmux$1306.
    dead port 1/2 on $mux $procmux$1309.
    dead port 1/2 on $mux $procmux$1312.
    dead port 1/2 on $mux $procmux$1315.
    dead port 1/2 on $mux $procmux$1318.
    dead port 1/2 on $mux $procmux$1321.
    dead port 1/2 on $mux $procmux$1324.
    dead port 1/2 on $mux $procmux$1327.
    dead port 1/2 on $mux $procmux$133.
    dead port 1/2 on $mux $procmux$1330.
    dead port 1/2 on $mux $procmux$1333.
    dead port 1/2 on $mux $procmux$1336.
    dead port 1/2 on $mux $procmux$1339.
    dead port 1/2 on $mux $procmux$1342.
    dead port 1/2 on $mux $procmux$1345.
    dead port 1/2 on $mux $procmux$1348.
    dead port 1/2 on $mux $procmux$1351.
    dead port 1/2 on $mux $procmux$1357.
    dead port 1/2 on $mux $procmux$136.
    dead port 1/2 on $mux $procmux$1360.
    dead port 1/2 on $mux $procmux$1363.
    dead port 1/2 on $mux $procmux$1366.
    dead port 1/2 on $mux $procmux$1369.
    dead port 1/2 on $mux $procmux$1372.
    dead port 1/2 on $mux $procmux$1375.
    dead port 1/2 on $mux $procmux$1378.
    dead port 1/2 on $mux $procmux$1381.
    dead port 1/2 on $mux $procmux$1384.
    dead port 1/2 on $mux $procmux$1387.
    dead port 1/2 on $mux $procmux$139.
    dead port 1/2 on $mux $procmux$1390.
    dead port 1/2 on $mux $procmux$1393.
    dead port 1/2 on $mux $procmux$1396.
    dead port 1/2 on $mux $procmux$1399.
    dead port 1/2 on $mux $procmux$1402.
    dead port 1/2 on $mux $procmux$1408.
    dead port 1/2 on $mux $procmux$1411.
    dead port 1/2 on $mux $procmux$1414.
    dead port 1/2 on $mux $procmux$1417.
    dead port 1/2 on $mux $procmux$142.
    dead port 1/2 on $mux $procmux$1420.
    dead port 1/2 on $mux $procmux$1423.
    dead port 1/2 on $mux $procmux$1426.
    dead port 1/2 on $mux $procmux$1429.
    dead port 1/2 on $mux $procmux$1432.
    dead port 1/2 on $mux $procmux$1435.
    dead port 1/2 on $mux $procmux$1438.
    dead port 1/2 on $mux $procmux$1441.
    dead port 1/2 on $mux $procmux$1444.
    dead port 1/2 on $mux $procmux$1447.
    dead port 1/2 on $mux $procmux$145.
    dead port 1/2 on $mux $procmux$1450.
    dead port 1/2 on $mux $procmux$1456.
    dead port 1/2 on $mux $procmux$1459.
    dead port 1/2 on $mux $procmux$1462.
    dead port 1/2 on $mux $procmux$1465.
    dead port 1/2 on $mux $procmux$1468.
    dead port 1/2 on $mux $procmux$1471.
    dead port 1/2 on $mux $procmux$1474.
    dead port 1/2 on $mux $procmux$1477.
    dead port 1/2 on $mux $procmux$148.
    dead port 1/2 on $mux $procmux$1480.
    dead port 1/2 on $mux $procmux$1483.
    dead port 1/2 on $mux $procmux$1486.
    dead port 1/2 on $mux $procmux$1489.
    dead port 1/2 on $mux $procmux$1492.
    dead port 1/2 on $mux $procmux$1495.
    dead port 1/2 on $mux $procmux$1498.
    dead port 1/2 on $mux $procmux$1504.
    dead port 1/2 on $mux $procmux$1507.
    dead port 1/2 on $mux $procmux$151.
    dead port 1/2 on $mux $procmux$1510.
    dead port 1/2 on $mux $procmux$1513.
    dead port 1/2 on $mux $procmux$1516.
    dead port 1/2 on $mux $procmux$1519.
    dead port 1/2 on $mux $procmux$1522.
    dead port 1/2 on $mux $procmux$1525.
    dead port 1/2 on $mux $procmux$1528.
    dead port 1/2 on $mux $procmux$1531.
    dead port 1/2 on $mux $procmux$1534.
    dead port 1/2 on $mux $procmux$1537.
    dead port 1/2 on $mux $procmux$154.
    dead port 1/2 on $mux $procmux$1540.
    dead port 1/2 on $mux $procmux$1543.
    dead port 1/2 on $mux $procmux$1549.
    dead port 1/2 on $mux $procmux$1552.
    dead port 1/2 on $mux $procmux$1555.
    dead port 1/2 on $mux $procmux$1558.
    dead port 1/2 on $mux $procmux$1561.
    dead port 1/2 on $mux $procmux$1564.
    dead port 1/2 on $mux $procmux$1567.
    dead port 1/2 on $mux $procmux$157.
    dead port 1/2 on $mux $procmux$1570.
    dead port 1/2 on $mux $procmux$1573.
    dead port 1/2 on $mux $procmux$1576.
    dead port 1/2 on $mux $procmux$1579.
    dead port 1/2 on $mux $procmux$1582.
    dead port 1/2 on $mux $procmux$1585.
    dead port 1/2 on $mux $procmux$1588.
    dead port 1/2 on $mux $procmux$1594.
    dead port 1/2 on $mux $procmux$1597.
    dead port 1/2 on $mux $procmux$160.
    dead port 1/2 on $mux $procmux$1600.
    dead port 1/2 on $mux $procmux$1603.
    dead port 1/2 on $mux $procmux$1606.
    dead port 1/2 on $mux $procmux$1609.
    dead port 1/2 on $mux $procmux$1612.
    dead port 1/2 on $mux $procmux$1615.
    dead port 1/2 on $mux $procmux$1618.
    dead port 1/2 on $mux $procmux$1621.
    dead port 1/2 on $mux $procmux$1624.
    dead port 1/2 on $mux $procmux$1627.
    dead port 1/2 on $mux $procmux$163.
    dead port 1/2 on $mux $procmux$1630.
    dead port 1/2 on $mux $procmux$1636.
    dead port 1/2 on $mux $procmux$1639.
    dead port 1/2 on $mux $procmux$1642.
    dead port 1/2 on $mux $procmux$1645.
    dead port 1/2 on $mux $procmux$1648.
    dead port 1/2 on $mux $procmux$1651.
    dead port 1/2 on $mux $procmux$1654.
    dead port 1/2 on $mux $procmux$1657.
    dead port 1/2 on $mux $procmux$166.
    dead port 1/2 on $mux $procmux$1660.
    dead port 1/2 on $mux $procmux$1663.
    dead port 1/2 on $mux $procmux$1666.
    dead port 1/2 on $mux $procmux$1669.
    dead port 1/2 on $mux $procmux$1672.
    dead port 1/2 on $mux $procmux$1678.
    dead port 1/2 on $mux $procmux$1681.
    dead port 1/2 on $mux $procmux$1684.
    dead port 1/2 on $mux $procmux$1687.
    dead port 1/2 on $mux $procmux$169.
    dead port 1/2 on $mux $procmux$1690.
    dead port 1/2 on $mux $procmux$1693.
    dead port 1/2 on $mux $procmux$1696.
    dead port 1/2 on $mux $procmux$1699.
    dead port 1/2 on $mux $procmux$1702.
    dead port 1/2 on $mux $procmux$1705.
    dead port 1/2 on $mux $procmux$1708.
    dead port 1/2 on $mux $procmux$1711.
    dead port 1/2 on $mux $procmux$1717.
    dead port 1/2 on $mux $procmux$172.
    dead port 1/2 on $mux $procmux$1720.
    dead port 1/2 on $mux $procmux$1723.
    dead port 1/2 on $mux $procmux$1726.
    dead port 1/2 on $mux $procmux$1729.
    dead port 1/2 on $mux $procmux$1732.
    dead port 1/2 on $mux $procmux$1735.
    dead port 1/2 on $mux $procmux$1738.
    dead port 1/2 on $mux $procmux$1741.
    dead port 1/2 on $mux $procmux$1744.
    dead port 1/2 on $mux $procmux$1747.
    dead port 1/2 on $mux $procmux$175.
    dead port 1/2 on $mux $procmux$1750.
    dead port 1/2 on $mux $procmux$1756.
    dead port 1/2 on $mux $procmux$1759.
    dead port 1/2 on $mux $procmux$1762.
    dead port 1/2 on $mux $procmux$1765.
    dead port 1/2 on $mux $procmux$1768.
    dead port 1/2 on $mux $procmux$1771.
    dead port 1/2 on $mux $procmux$1774.
    dead port 1/2 on $mux $procmux$1777.
    dead port 1/2 on $mux $procmux$178.
    dead port 1/2 on $mux $procmux$1780.
    dead port 1/2 on $mux $procmux$1783.
    dead port 1/2 on $mux $procmux$1786.
    dead port 1/2 on $mux $procmux$1792.
    dead port 1/2 on $mux $procmux$1795.
    dead port 1/2 on $mux $procmux$1798.
    dead port 1/2 on $mux $procmux$1801.
    dead port 1/2 on $mux $procmux$1804.
    dead port 1/2 on $mux $procmux$1807.
    dead port 1/2 on $mux $procmux$181.
    dead port 1/2 on $mux $procmux$1810.
    dead port 1/2 on $mux $procmux$1813.
    dead port 1/2 on $mux $procmux$1816.
    dead port 1/2 on $mux $procmux$1819.
    dead port 1/2 on $mux $procmux$1822.
    dead port 1/2 on $mux $procmux$1828.
    dead port 1/2 on $mux $procmux$1831.
    dead port 1/2 on $mux $procmux$1834.
    dead port 1/2 on $mux $procmux$1837.
    dead port 1/2 on $mux $procmux$184.
    dead port 1/2 on $mux $procmux$1840.
    dead port 1/2 on $mux $procmux$1843.
    dead port 1/2 on $mux $procmux$1846.
    dead port 1/2 on $mux $procmux$1849.
    dead port 1/2 on $mux $procmux$1852.
    dead port 1/2 on $mux $procmux$1855.
    dead port 1/2 on $mux $procmux$1861.
    dead port 1/2 on $mux $procmux$1864.
    dead port 1/2 on $mux $procmux$1867.
    dead port 1/2 on $mux $procmux$187.
    dead port 1/2 on $mux $procmux$1870.
    dead port 1/2 on $mux $procmux$1873.
    dead port 1/2 on $mux $procmux$1876.
    dead port 1/2 on $mux $procmux$1879.
    dead port 1/2 on $mux $procmux$1882.
    dead port 1/2 on $mux $procmux$1885.
    dead port 1/2 on $mux $procmux$1888.
    dead port 1/2 on $mux $procmux$1894.
    dead port 1/2 on $mux $procmux$1897.
    dead port 1/2 on $mux $procmux$190.
    dead port 1/2 on $mux $procmux$1900.
    dead port 1/2 on $mux $procmux$1903.
    dead port 1/2 on $mux $procmux$1906.
    dead port 1/2 on $mux $procmux$1909.
    dead port 1/2 on $mux $procmux$1912.
    dead port 1/2 on $mux $procmux$1915.
    dead port 1/2 on $mux $procmux$1918.
    dead port 1/2 on $mux $procmux$1924.
    dead port 1/2 on $mux $procmux$1927.
    dead port 1/2 on $mux $procmux$1930.
    dead port 1/2 on $mux $procmux$1933.
    dead port 1/2 on $mux $procmux$1936.
    dead port 1/2 on $mux $procmux$1939.
    dead port 1/2 on $mux $procmux$1942.
    dead port 1/2 on $mux $procmux$1945.
    dead port 1/2 on $mux $procmux$1948.
    dead port 1/2 on $mux $procmux$1954.
    dead port 1/2 on $mux $procmux$1957.
    dead port 1/2 on $mux $procmux$196.
    dead port 1/2 on $mux $procmux$1960.
    dead port 1/2 on $mux $procmux$1963.
    dead port 1/2 on $mux $procmux$1966.
    dead port 1/2 on $mux $procmux$1969.
    dead port 1/2 on $mux $procmux$1972.
    dead port 1/2 on $mux $procmux$1975.
    dead port 1/2 on $mux $procmux$1981.
    dead port 1/2 on $mux $procmux$1984.
    dead port 1/2 on $mux $procmux$1987.
    dead port 1/2 on $mux $procmux$199.
    dead port 1/2 on $mux $procmux$1990.
    dead port 1/2 on $mux $procmux$1993.
    dead port 1/2 on $mux $procmux$1996.
    dead port 1/2 on $mux $procmux$1999.
    dead port 1/2 on $mux $procmux$2002.
    dead port 1/2 on $mux $procmux$2008.
    dead port 1/2 on $mux $procmux$2011.
    dead port 1/2 on $mux $procmux$2014.
    dead port 1/2 on $mux $procmux$2017.
    dead port 1/2 on $mux $procmux$202.
    dead port 1/2 on $mux $procmux$2020.
    dead port 1/2 on $mux $procmux$2023.
    dead port 1/2 on $mux $procmux$2026.
    dead port 1/2 on $mux $procmux$2032.
    dead port 1/2 on $mux $procmux$2035.
    dead port 1/2 on $mux $procmux$2038.
    dead port 1/2 on $mux $procmux$2041.
    dead port 1/2 on $mux $procmux$2044.
    dead port 1/2 on $mux $procmux$2047.
    dead port 1/2 on $mux $procmux$205.
    dead port 1/2 on $mux $procmux$2050.
    dead port 1/2 on $mux $procmux$2056.
    dead port 1/2 on $mux $procmux$2059.
    dead port 1/2 on $mux $procmux$2062.
    dead port 1/2 on $mux $procmux$2065.
    dead port 1/2 on $mux $procmux$2068.
    dead port 1/2 on $mux $procmux$2071.
    dead port 1/2 on $mux $procmux$2077.
    dead port 1/2 on $mux $procmux$208.
    dead port 1/2 on $mux $procmux$2080.
    dead port 1/2 on $mux $procmux$2083.
    dead port 1/2 on $mux $procmux$2086.
    dead port 1/2 on $mux $procmux$2089.
    dead port 1/2 on $mux $procmux$2092.
    dead port 1/2 on $mux $procmux$2098.
    dead port 1/2 on $mux $procmux$2101.
    dead port 1/2 on $mux $procmux$2104.
    dead port 1/2 on $mux $procmux$2107.
    dead port 1/2 on $mux $procmux$211.
    dead port 1/2 on $mux $procmux$2110.
    dead port 1/2 on $mux $procmux$2116.
    dead port 1/2 on $mux $procmux$2119.
    dead port 1/2 on $mux $procmux$2122.
    dead port 1/2 on $mux $procmux$2125.
    dead port 1/2 on $mux $procmux$2128.
    dead port 1/2 on $mux $procmux$2134.
    dead port 1/2 on $mux $procmux$2137.
    dead port 1/2 on $mux $procmux$214.
    dead port 1/2 on $mux $procmux$2140.
    dead port 1/2 on $mux $procmux$2143.
    dead port 1/2 on $mux $procmux$2149.
    dead port 1/2 on $mux $procmux$2152.
    dead port 1/2 on $mux $procmux$2155.
    dead port 1/2 on $mux $procmux$2158.
    dead port 1/2 on $mux $procmux$2164.
    dead port 1/2 on $mux $procmux$2167.
    dead port 1/2 on $mux $procmux$217.
    dead port 1/2 on $mux $procmux$2170.
    dead port 1/2 on $mux $procmux$2176.
    dead port 1/2 on $mux $procmux$2179.
    dead port 1/2 on $mux $procmux$2182.
    dead port 1/2 on $mux $procmux$2188.
    dead port 1/2 on $mux $procmux$2191.
    dead port 1/2 on $mux $procmux$2197.
    dead port 1/2 on $mux $procmux$220.
    dead port 1/2 on $mux $procmux$2200.
    dead port 1/2 on $mux $procmux$2206.
    dead port 1/2 on $mux $procmux$2212.
    dead port 1/2 on $mux $procmux$223.
    dead port 1/2 on $mux $procmux$226.
    dead port 1/2 on $mux $procmux$229.
    dead port 1/2 on $mux $procmux$232.
    dead port 1/2 on $mux $procmux$235.
    dead port 1/2 on $mux $procmux$238.
    dead port 1/2 on $mux $procmux$241.
    dead port 1/2 on $mux $procmux$244.
    dead port 1/2 on $mux $procmux$247.
    dead port 1/2 on $mux $procmux$250.
    dead port 1/2 on $mux $procmux$253.
    dead port 1/2 on $mux $procmux$256.
    dead port 1/2 on $mux $procmux$259.
    dead port 1/2 on $mux $procmux$262.
    dead port 1/2 on $mux $procmux$265.
    dead port 1/2 on $mux $procmux$268.
    dead port 1/2 on $mux $procmux$274.
    dead port 1/2 on $mux $procmux$277.
    dead port 1/2 on $mux $procmux$280.
    dead port 1/2 on $mux $procmux$283.
    dead port 1/2 on $mux $procmux$286.
    dead port 1/2 on $mux $procmux$289.
    dead port 1/2 on $mux $procmux$292.
    dead port 1/2 on $mux $procmux$295.
    dead port 1/2 on $mux $procmux$298.
    dead port 1/2 on $mux $procmux$301.
    dead port 1/2 on $mux $procmux$304.
    dead port 1/2 on $mux $procmux$307.
    dead port 1/2 on $mux $procmux$310.
    dead port 1/2 on $mux $procmux$313.
    dead port 1/2 on $mux $procmux$316.
    dead port 1/2 on $mux $procmux$319.
    dead port 1/2 on $mux $procmux$322.
    dead port 1/2 on $mux $procmux$325.
    dead port 1/2 on $mux $procmux$328.
    dead port 1/2 on $mux $procmux$331.
    dead port 1/2 on $mux $procmux$334.
    dead port 1/2 on $mux $procmux$337.
    dead port 1/2 on $mux $procmux$340.
    dead port 1/2 on $mux $procmux$343.
    dead port 1/2 on $mux $procmux$349.
    dead port 1/2 on $mux $procmux$352.
    dead port 1/2 on $mux $procmux$355.
    dead port 1/2 on $mux $procmux$358.
    dead port 1/2 on $mux $procmux$361.
    dead port 1/2 on $mux $procmux$364.
    dead port 1/2 on $mux $procmux$367.
    dead port 1/2 on $mux $procmux$370.
    dead port 1/2 on $mux $procmux$373.
    dead port 1/2 on $mux $procmux$376.
    dead port 1/2 on $mux $procmux$379.
    dead port 1/2 on $mux $procmux$382.
    dead port 1/2 on $mux $procmux$385.
    dead port 1/2 on $mux $procmux$388.
    dead port 1/2 on $mux $procmux$391.
    dead port 1/2 on $mux $procmux$394.
    dead port 1/2 on $mux $procmux$397.
    dead port 1/2 on $mux $procmux$400.
    dead port 1/2 on $mux $procmux$403.
    dead port 1/2 on $mux $procmux$406.
    dead port 1/2 on $mux $procmux$409.
    dead port 1/2 on $mux $procmux$412.
    dead port 1/2 on $mux $procmux$415.
    dead port 1/2 on $mux $procmux$418.
    dead port 1/2 on $mux $procmux$424.
    dead port 1/2 on $mux $procmux$427.
    dead port 1/2 on $mux $procmux$430.
    dead port 1/2 on $mux $procmux$433.
    dead port 1/2 on $mux $procmux$436.
    dead port 1/2 on $mux $procmux$439.
    dead port 1/2 on $mux $procmux$442.
    dead port 1/2 on $mux $procmux$445.
    dead port 1/2 on $mux $procmux$448.
    dead port 1/2 on $mux $procmux$451.
    dead port 1/2 on $mux $procmux$454.
    dead port 1/2 on $mux $procmux$457.
    dead port 1/2 on $mux $procmux$460.
    dead port 1/2 on $mux $procmux$463.
    dead port 1/2 on $mux $procmux$466.
    dead port 1/2 on $mux $procmux$469.
    dead port 1/2 on $mux $procmux$472.
    dead port 1/2 on $mux $procmux$475.
    dead port 1/2 on $mux $procmux$478.
    dead port 1/2 on $mux $procmux$481.
    dead port 1/2 on $mux $procmux$484.
    dead port 1/2 on $mux $procmux$487.
    dead port 1/2 on $mux $procmux$490.
    dead port 1/2 on $mux $procmux$496.
    dead port 1/2 on $mux $procmux$499.
    dead port 1/2 on $mux $procmux$502.
    dead port 1/2 on $mux $procmux$505.
    dead port 1/2 on $mux $procmux$508.
    dead port 1/2 on $mux $procmux$511.
    dead port 1/2 on $mux $procmux$514.
    dead port 1/2 on $mux $procmux$517.
    dead port 1/2 on $mux $procmux$520.
    dead port 1/2 on $mux $procmux$523.
    dead port 1/2 on $mux $procmux$526.
    dead port 1/2 on $mux $procmux$529.
    dead port 1/2 on $mux $procmux$532.
    dead port 1/2 on $mux $procmux$535.
    dead port 1/2 on $mux $procmux$538.
    dead port 1/2 on $mux $procmux$541.
    dead port 1/2 on $mux $procmux$544.
    dead port 1/2 on $mux $procmux$547.
    dead port 1/2 on $mux $procmux$550.
    dead port 1/2 on $mux $procmux$553.
    dead port 1/2 on $mux $procmux$556.
    dead port 1/2 on $mux $procmux$559.
    dead port 1/2 on $mux $procmux$562.
    dead port 1/2 on $mux $procmux$568.
    dead port 1/2 on $mux $procmux$571.
    dead port 1/2 on $mux $procmux$574.
    dead port 1/2 on $mux $procmux$577.
    dead port 1/2 on $mux $procmux$580.
    dead port 1/2 on $mux $procmux$583.
    dead port 1/2 on $mux $procmux$586.
    dead port 1/2 on $mux $procmux$589.
    dead port 1/2 on $mux $procmux$592.
    dead port 1/2 on $mux $procmux$595.
    dead port 1/2 on $mux $procmux$598.
    dead port 1/2 on $mux $procmux$601.
    dead port 1/2 on $mux $procmux$604.
    dead port 1/2 on $mux $procmux$607.
    dead port 1/2 on $mux $procmux$610.
    dead port 1/2 on $mux $procmux$613.
    dead port 1/2 on $mux $procmux$616.
    dead port 1/2 on $mux $procmux$619.
    dead port 1/2 on $mux $procmux$622.
    dead port 1/2 on $mux $procmux$625.
    dead port 1/2 on $mux $procmux$628.
    dead port 1/2 on $mux $procmux$631.
    dead port 1/2 on $mux $procmux$637.
    dead port 1/2 on $mux $procmux$640.
    dead port 1/2 on $mux $procmux$643.
    dead port 1/2 on $mux $procmux$646.
    dead port 1/2 on $mux $procmux$649.
    dead port 1/2 on $mux $procmux$652.
    dead port 1/2 on $mux $procmux$655.
    dead port 1/2 on $mux $procmux$658.
    dead port 1/2 on $mux $procmux$661.
    dead port 1/2 on $mux $procmux$664.
    dead port 1/2 on $mux $procmux$667.
    dead port 1/2 on $mux $procmux$670.
    dead port 1/2 on $mux $procmux$673.
    dead port 1/2 on $mux $procmux$676.
    dead port 1/2 on $mux $procmux$679.
    dead port 1/2 on $mux $procmux$682.
    dead port 1/2 on $mux $procmux$685.
    dead port 1/2 on $mux $procmux$688.
    dead port 1/2 on $mux $procmux$691.
    dead port 1/2 on $mux $procmux$694.
    dead port 1/2 on $mux $procmux$697.
    dead port 1/2 on $mux $procmux$700.
    dead port 1/2 on $mux $procmux$706.
    dead port 1/2 on $mux $procmux$709.
    dead port 1/2 on $mux $procmux$712.
    dead port 1/2 on $mux $procmux$715.
    dead port 1/2 on $mux $procmux$718.
    dead port 1/2 on $mux $procmux$721.
    dead port 1/2 on $mux $procmux$724.
    dead port 1/2 on $mux $procmux$727.
    dead port 1/2 on $mux $procmux$730.
    dead port 1/2 on $mux $procmux$733.
    dead port 1/2 on $mux $procmux$736.
    dead port 1/2 on $mux $procmux$739.
    dead port 1/2 on $mux $procmux$742.
    dead port 1/2 on $mux $procmux$745.
    dead port 1/2 on $mux $procmux$748.
    dead port 1/2 on $mux $procmux$751.
    dead port 1/2 on $mux $procmux$754.
    dead port 1/2 on $mux $procmux$757.
    dead port 1/2 on $mux $procmux$760.
    dead port 1/2 on $mux $procmux$763.
    dead port 1/2 on $mux $procmux$766.
    dead port 1/2 on $mux $procmux$772.
    dead port 1/2 on $mux $procmux$775.
    dead port 1/2 on $mux $procmux$778.
    dead port 1/2 on $mux $procmux$781.
    dead port 1/2 on $mux $procmux$784.
    dead port 1/2 on $mux $procmux$787.
    dead port 1/2 on $mux $procmux$790.
    dead port 1/2 on $mux $procmux$793.
    dead port 1/2 on $mux $procmux$796.
    dead port 1/2 on $mux $procmux$799.
    dead port 1/2 on $mux $procmux$802.
    dead port 1/2 on $mux $procmux$805.
    dead port 1/2 on $mux $procmux$808.
    dead port 1/2 on $mux $procmux$811.
    dead port 1/2 on $mux $procmux$814.
    dead port 1/2 on $mux $procmux$817.
    dead port 1/2 on $mux $procmux$820.
    dead port 1/2 on $mux $procmux$823.
    dead port 1/2 on $mux $procmux$826.
    dead port 1/2 on $mux $procmux$829.
    dead port 1/2 on $mux $procmux$832.
    dead port 1/2 on $mux $procmux$838.
    dead port 1/2 on $mux $procmux$841.
    dead port 1/2 on $mux $procmux$844.
    dead port 1/2 on $mux $procmux$847.
    dead port 1/2 on $mux $procmux$850.
    dead port 1/2 on $mux $procmux$853.
    dead port 1/2 on $mux $procmux$856.
    dead port 1/2 on $mux $procmux$859.
    dead port 1/2 on $mux $procmux$862.
    dead port 1/2 on $mux $procmux$865.
    dead port 1/2 on $mux $procmux$868.
    dead port 1/2 on $mux $procmux$871.
    dead port 1/2 on $mux $procmux$874.
    dead port 1/2 on $mux $procmux$877.
    dead port 1/2 on $mux $procmux$880.
    dead port 1/2 on $mux $procmux$883.
    dead port 1/2 on $mux $procmux$886.
    dead port 1/2 on $mux $procmux$889.
    dead port 1/2 on $mux $procmux$892.
    dead port 1/2 on $mux $procmux$895.
    dead port 1/2 on $mux $procmux$901.
    dead port 1/2 on $mux $procmux$904.
    dead port 1/2 on $mux $procmux$907.
    dead port 1/2 on $mux $procmux$910.
    dead port 1/2 on $mux $procmux$913.
    dead port 1/2 on $mux $procmux$916.
    dead port 1/2 on $mux $procmux$919.
    dead port 1/2 on $mux $procmux$922.
    dead port 1/2 on $mux $procmux$925.
    dead port 1/2 on $mux $procmux$928.
    dead port 1/2 on $mux $procmux$931.
    dead port 1/2 on $mux $procmux$934.
    dead port 1/2 on $mux $procmux$937.
    dead port 1/2 on $mux $procmux$940.
    dead port 1/2 on $mux $procmux$943.
    dead port 1/2 on $mux $procmux$946.
    dead port 1/2 on $mux $procmux$949.
    dead port 1/2 on $mux $procmux$952.
    dead port 1/2 on $mux $procmux$955.
    dead port 1/2 on $mux $procmux$958.
    dead port 1/2 on $mux $procmux$964.
    dead port 1/2 on $mux $procmux$967.
    dead port 1/2 on $mux $procmux$970.
    dead port 1/2 on $mux $procmux$973.
    dead port 1/2 on $mux $procmux$976.
    dead port 1/2 on $mux $procmux$979.
    dead port 1/2 on $mux $procmux$982.
    dead port 1/2 on $mux $procmux$985.
    dead port 1/2 on $mux $procmux$988.
    dead port 1/2 on $mux $procmux$991.
    dead port 1/2 on $mux $procmux$994.
    dead port 1/2 on $mux $procmux$997.
Removed 650 multiplexer ports.
<suppressed ~3 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MULTI_32bit.
Performed a total of 0 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..
Removed 0 unused cells and 702 unused wires.
<suppressed ~1 debug messages>

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

5.7.9. Rerunning OPT passes. (Maybe there is more to do..)

5.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MULTI_32bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MULTI_32bit.
Performed a total of 0 changes.

5.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.7.13. Executing OPT_DFF pass (perform DFF optimizations).

5.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..

5.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

5.7.16. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MULTI_32bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MULTI_32bit.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

5.9.9. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 50) from port Y of cell MULTI_32bit.$mul$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:45$5 ($mul).
Removed top 3 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:59$13 ($add).
Removed top 3 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:63$17 ($add).
Removed top 3 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:67$21 ($add).
Removed top 3 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:71$25 ($add).
Removed top 3 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:75$29 ($add).
Removed top 3 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:79$33 ($add).
Removed top 3 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:83$37 ($add).
Removed top 3 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:87$41 ($add).
Removed top 3 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:91$45 ($add).
Removed top 3 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:95$49 ($add).
Removed top 3 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:99$53 ($add).
Removed top 1 bits (of 8) from port B of cell MULTI_32bit.$sub$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:103$56 ($sub).
Removed top 4 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:103$57 ($add).
Removed top 4 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:107$61 ($add).
Removed top 4 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:111$65 ($add).
Removed top 4 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:115$69 ($add).
Removed top 4 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:119$73 ($add).
Removed top 4 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:123$77 ($add).
Removed top 4 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:127$81 ($add).
Removed top 4 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:131$85 ($add).
Removed top 5 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:135$89 ($add).
Removed top 5 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:139$93 ($add).
Removed top 5 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:143$97 ($add).
Removed top 5 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:147$101 ($add).
Removed top 6 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:151$105 ($add).
Removed top 6 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:155$109 ($add).
Removed top 7 bits (of 8) from port B of cell MULTI_32bit.$add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:159$112 ($add).
Removed top 31 bits (of 32) from FF cell MULTI_32bit.$procdff$2223 ($dff).

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module MULTI_32bit:
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:103$55 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:103$57 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:107$61 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:111$65 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:115$69 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:119$73 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:123$77 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:127$81 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:131$85 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:135$89 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:139$93 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:143$97 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:147$101 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:151$105 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:155$109 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:159$112 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:32$1 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:59$13 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:63$17 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:67$21 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:71$25 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:75$29 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:79$33 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:83$37 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:87$41 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:91$45 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:95$49 ($add).
  creating $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:99$53 ($add).
  creating $macc model for $mul$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:45$5 ($mul).
  creating $macc model for $sub$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:103$56 ($sub).
  merging $macc model for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:103$55 into $sub$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:103$56.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:99$53.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:95$49.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:91$45.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:87$41.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:83$37.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:79$33.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:75$29.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:71$25.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:67$21.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:63$17.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:59$13.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:32$1.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:159$112.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:155$109.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:151$105.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:147$101.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:143$97.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:139$93.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:135$89.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:131$85.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:127$81.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:123$77.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:119$73.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:115$69.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:111$65.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:107$61.
  creating $alu model for $macc $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:103$57.
  creating $macc cell for $mul$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:45$5: $auto$alumacc.cc:365:replace_macc$2224
  creating $macc cell for $sub$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:103$56: $auto$alumacc.cc:365:replace_macc$2225
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:103$57: $auto$alumacc.cc:485:replace_alu$2226
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:107$61: $auto$alumacc.cc:485:replace_alu$2229
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:111$65: $auto$alumacc.cc:485:replace_alu$2232
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:115$69: $auto$alumacc.cc:485:replace_alu$2235
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:119$73: $auto$alumacc.cc:485:replace_alu$2238
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:123$77: $auto$alumacc.cc:485:replace_alu$2241
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:127$81: $auto$alumacc.cc:485:replace_alu$2244
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:131$85: $auto$alumacc.cc:485:replace_alu$2247
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:135$89: $auto$alumacc.cc:485:replace_alu$2250
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:139$93: $auto$alumacc.cc:485:replace_alu$2253
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:143$97: $auto$alumacc.cc:485:replace_alu$2256
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:147$101: $auto$alumacc.cc:485:replace_alu$2259
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:151$105: $auto$alumacc.cc:485:replace_alu$2262
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:155$109: $auto$alumacc.cc:485:replace_alu$2265
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:159$112: $auto$alumacc.cc:485:replace_alu$2268
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:32$1: $auto$alumacc.cc:485:replace_alu$2271
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:59$13: $auto$alumacc.cc:485:replace_alu$2274
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:63$17: $auto$alumacc.cc:485:replace_alu$2277
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:67$21: $auto$alumacc.cc:485:replace_alu$2280
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:71$25: $auto$alumacc.cc:485:replace_alu$2283
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:75$29: $auto$alumacc.cc:485:replace_alu$2286
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:79$33: $auto$alumacc.cc:485:replace_alu$2289
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:83$37: $auto$alumacc.cc:485:replace_alu$2292
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:87$41: $auto$alumacc.cc:485:replace_alu$2295
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:91$45: $auto$alumacc.cc:485:replace_alu$2298
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:95$49: $auto$alumacc.cc:485:replace_alu$2301
  creating $alu cell for $add$/openlane/designs/MULTI_32bit/src/MULTI_32bit.v:99$53: $auto$alumacc.cc:485:replace_alu$2304
  created 27 $alu and 2 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MULTI_32bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MULTI_32bit.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 47 on $procdff$2222 ($dff) from module MULTI_32bit.
Setting constant 0-bit at position 48 on $procdff$2222 ($dff) from module MULTI_32bit.
Setting constant 0-bit at position 49 on $procdff$2222 ($dff) from module MULTI_32bit.
Setting constant 0-bit at position 50 on $procdff$2222 ($dff) from module MULTI_32bit.

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.
<suppressed ~8 debug messages>

5.15.9. Rerunning OPT passes. (Maybe there is more to do..)

5.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MULTI_32bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MULTI_32bit.
Performed a total of 0 changes.

5.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.15.13. Executing OPT_DFF pass (perform DFF optimizations).

5.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..
Removed 4 unused cells and 16 unused wires.
<suppressed ~5 debug messages>

5.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

5.15.16. Rerunning OPT passes. (Maybe there is more to do..)

5.15.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MULTI_32bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.15.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MULTI_32bit.
Performed a total of 0 changes.

5.15.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.15.20. Executing OPT_DFF pass (perform DFF optimizations).

5.15.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..

5.15.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

5.15.23. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.16.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..

5.16.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.16.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..

5.16.9. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.
<suppressed ~39 debug messages>

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MULTI_32bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MULTI_32bit.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper maccmap for cells of type $macc.
  add \P2 [58:51] (8 bits, unsigned)
  add \P2 [66:59] (8 bits, unsigned)
  add 8'10000001 (8 bits, unsigned)
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$4bdb94ac02745db6fc41e2e497d9b9793cd51dc6\_90_alu for cells of type $alu.
Using template $paramod$cc48387a3f2cae79a81035f3d5a9b4758cb77854\_90_alu for cells of type $alu.
Using template $paramod$4f7462fd7944a40ab328577064922bdf555975a5\_90_alu for cells of type $alu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$b9513f2555ba02118b069422fea717af39120cf7\_90_alu for cells of type $alu.
Using template $paramod$08b2a3505d8f2cd2b03f068ccaf5ce95d4eb0556\_90_alu for cells of type $alu.
  add \P1 [23:1] * \P1 [54:32] (23x23 bits, unsigned)
Using template $paramod$9970e6a829a899c1fae39c88305c3c80d98a6bfd\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$fa8d9e4c2749d63ae521a69564d54ead1ad1232d\_90_alu for cells of type $alu.
Using template $paramod$e82bc780abe45b949d821aa3d0d92433ac3b9e09\_90_alu for cells of type $alu.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_90_alu for cells of type $alu.
Using template $paramod$a950948e19702336540a1f557d0a91306bdb9188\_90_alu for cells of type $alu.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$1d1e68f77481583066c6d429218f48ea9d5739b3\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000101110 for cells of type $fa.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod$fbf9cabb1106ebb19d2876bda35dcfbc3788d13d\_90_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001000 for cells of type $fa.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101110 for cells of type $lcu.
No more expansions possible.
<suppressed ~2365 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.
<suppressed ~3882 debug messages>

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
<suppressed ~993 debug messages>
Removed a total of 331 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..
Removed 97 unused cells and 1274 unused wires.
<suppressed ~98 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\MULTI_32bit' to `<abc-temp-dir>/input.blif'..
Extracted 4240 gates and 4350 wires to a netlist network with 110 inputs and 78 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      443
ABC RESULTS:            ANDNOT cells:     1081
ABC RESULTS:               MUX cells:      681
ABC RESULTS:              NAND cells:      219
ABC RESULTS:               NOR cells:      117
ABC RESULTS:               NOT cells:      118
ABC RESULTS:                OR cells:      414
ABC RESULTS:             ORNOT cells:       64
ABC RESULTS:              XNOR cells:      263
ABC RESULTS:               XOR cells:      936
ABC RESULTS:        internal signals:     4162
ABC RESULTS:           input signals:      110
ABC RESULTS:          output signals:       78
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.
<suppressed ~102 debug messages>

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..
Removed 21 unused cells and 590 unused wires.
<suppressed ~23 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \MULTI_32bit

5.25.2. Analyzing design hierarchy..
Top module:  \MULTI_32bit
Removed 0 unused modules.

5.26. Printing statistics.

=== MULTI_32bit ===

   Number of wires:               4256
   Number of wire bits:           5006
   Number of public wires:           8
   Number of public wire bits:     260
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4474
     $_ANDNOT_                    1081
     $_AND_                        443
     $_DFF_P_                      159
     $_MUX_                        681
     $_NAND_                       219
     $_NOR_                        117
     $_NOT_                         97
     $_ORNOT_                       64
     $_OR_                         414
     $_XNOR_                       263
     $_XOR_                        936

5.27. Executing CHECK pass (checking for obvious problems).
Checking module MULTI_32bit...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/MULTI_32bit/runs/RUN_2022.04.04_17.20.38/tmp/synthesis/post_techmap.dot'.
Dumping module MULTI_32bit to page 1.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MULTI_32bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MULTI_32bit.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MULTI_32bit'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MULTI_32bit.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..

10. Printing statistics.

=== MULTI_32bit ===

   Number of wires:               4256
   Number of wire bits:           5006
   Number of public wires:           8
   Number of public wire bits:     260
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4474
     $_ANDNOT_                    1081
     $_AND_                        443
     $_DFF_P_                      159
     $_MUX_                        681
     $_NAND_                       219
     $_NOR_                        117
     $_NOT_                         97
     $_ORNOT_                       64
     $_OR_                         414
     $_XNOR_                       263
     $_XOR_                        936

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/adithi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/adithi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: /home/adithi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/adithi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

14. Executing SIMPLEMAP pass (map simple cells to gate primitives).

15. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

15.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\MULTI_32bit':
  mapped 159 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

16. Printing statistics.

=== MULTI_32bit ===

   Number of wires:               4256
   Number of wire bits:           5006
   Number of public wires:           8
   Number of public wire bits:     260
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4474
     $_ANDNOT_                    1081
     $_AND_                        443
     $_MUX_                        681
     $_NAND_                       219
     $_NOR_                        117
     $_NOT_                         97
     $_ORNOT_                       64
     $_OR_                         414
     $_XNOR_                       263
     $_XOR_                        936
     sky130_fd_sc_hd__dfxtp_2      159

[INFO]: USING STRATEGY AREA 0

17. Executing ABC pass (technology mapping using ABC).

17.1. Extracting gate netlist of module `\MULTI_32bit' to `/tmp/yosys-abc-24VoS9/input.blif'..
Extracted 4315 gates and 4425 wires to a netlist network with 110 inputs and 78 outputs.

17.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-24VoS9/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-24VoS9/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-24VoS9/input.blif 
ABC: + read_lib -w /openlane/designs/MULTI_32bit/runs/RUN_2022.04.04_17.20.38/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/MULTI_32bit/runs/RUN_2022.04.04_17.20.38/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.12 sec
ABC: Memory =    7.77 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/MULTI_32bit/runs/RUN_2022.04.04_17.20.38/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openlane/designs/MULTI_32bit/runs/RUN_2022.04.04_17.20.38/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 5 -S 1000.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (8776.83 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   4518 ( 19.4 %)   Cap =  8.5 ff (  4.6 %)   Area =    38684.60 ( 80.5 %)   Delay =  8933.55 ps  (  1.5 %)               
ABC: Path  0 --      65 : 0    2 pi                        A =   0.00  Df =   5.8   -4.0 ps  S =  17.5 ps  Cin =  0.0 ff  Cout =   4.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    1457 : 1    5 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 155.4  -43.4 ps  S = 158.7 ps  Cin =  2.1 ff  Cout =  12.7 ff  Cmax = 130.0 ff  G =  575  
ABC: Path  2 --    1458 : 1    5 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 338.3  -87.4 ps  S = 154.3 ps  Cin =  2.1 ff  Cout =  12.3 ff  Cmax = 130.0 ff  G =  562  
ABC: Path  3 --    1500 : 4    3 sky130_fd_sc_hd__a22oi_2  A =  12.51  Df = 493.8  -37.3 ps  S = 209.4 ps  Cin =  4.3 ff  Cout =  10.9 ff  Cmax = 170.3 ff  G =  238  
ABC: Path  4 --    1501 : 3    2 sky130_fd_sc_hd__or3_2    A =   7.51  Df = 880.0 -231.1 ps  S =  80.6 ps  Cin =  1.5 ff  Cout =   3.9 ff  Cmax = 310.4 ff  G =  249  
ABC: Path  5 --    1506 : 3    2 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =1079.0 -321.2 ps  S =  37.3 ps  Cin =  2.4 ff  Cout =   4.1 ff  Cmax = 309.5 ff  G =  167  
ABC: Path  6 --    1507 : 2    1 sky130_fd_sc_hd__and2b_2  A =   8.76  Df =1287.3   -8.4 ps  S =  61.4 ps  Cin =  1.6 ff  Cout =   8.5 ff  Cmax = 310.4 ff  G =  515  
ABC: Path  7 --    1508 : 2    2 sky130_fd_sc_hd__xor2_2   A =  16.27  Df =1420.5   -3.2 ps  S = 111.9 ps  Cin =  8.6 ff  Cout =   4.1 ff  Cmax = 130.0 ff  G =   46  
ABC: Path  8 --    1510 : 3    2 sky130_fd_sc_hd__or3_2    A =   7.51  Df =1882.1 -333.6 ps  S =  77.2 ps  Cin =  1.5 ff  Cout =   3.2 ff  Cmax = 310.4 ff  G =  205  
ABC: Path  9 --    1546 : 3    2 sky130_fd_sc_hd__and3b_2  A =  10.01  Df =2097.3 -310.3 ps  S =  64.3 ps  Cin =  1.5 ff  Cout =   7.2 ff  Cmax = 309.5 ff  G =  453  
ABC: Path 10 --    1583 : 4    5 sky130_fd_sc_hd__o211ai_2 A =  12.51  Df =2289.9 -399.6 ps  S = 203.0 ps  Cin =  4.4 ff  Cout =  11.5 ff  Cmax = 133.7 ff  G =  253  
ABC: Path 11 --    1586 : 4    5 sky130_fd_sc_hd__or4bb_2  A =  12.51  Df =2982.1 -415.9 ps  S = 136.7 ps  Cin =  1.5 ff  Cout =  14.0 ff  Cmax = 312.2 ff  G =  902  
ABC: Path 12 --    1696 : 4    2 sky130_fd_sc_hd__or4_2    A =   8.76  Df =3667.5 -735.9 ps  S = 102.9 ps  Cin =  1.5 ff  Cout =   3.8 ff  Cmax = 310.4 ff  G =  241  
ABC: Path 13 --    1697 : 4    2 sky130_fd_sc_hd__and4bb_2 A =  12.51  Df =3930.9 -336.4 ps  S =  77.0 ps  Cin =  1.5 ff  Cout =   7.2 ff  Cmax = 270.1 ff  G =  453  
ABC: Path 14 --    1783 : 5    2 sky130_fd_sc_hd__a2111o_2 A =  12.51  Df =4285.8  -23.3 ps  S =  75.3 ps  Cin =  2.4 ff  Cout =   6.9 ff  Cmax = 324.1 ff  G =  277  
ABC: Path 15 --    1861 : 3    4 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =4514.8  -97.4 ps  S =  86.9 ps  Cin =  2.4 ff  Cout =  15.1 ff  Cmax = 309.5 ff  G =  618  
ABC: Path 16 --    2027 : 5    2 sky130_fd_sc_hd__a311oi_2 A =  15.01  Df =4791.1 -265.5 ps  S = 245.6 ps  Cin =  4.3 ff  Cout =   6.7 ff  Cmax =  84.2 ff  G =  146  
ABC: Path 17 --    2117 : 3    3 sky130_fd_sc_hd__o21ai_2  A =   8.76  Df =4902.8 -195.6 ps  S = 144.0 ps  Cin =  4.5 ff  Cout =   8.6 ff  Cmax = 139.2 ff  G =  181  
ABC: Path 18 --    2199 : 3    3 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =5089.3 -290.7 ps  S = 171.0 ps  Cin =  4.6 ff  Cout =  11.3 ff  Cmax = 128.2 ff  G =  236  
ABC: Path 19 --    2295 : 3    3 sky130_fd_sc_hd__o21ai_2  A =   8.76  Df =5175.9 -228.3 ps  S = 113.6 ps  Cin =  4.5 ff  Cout =   5.6 ff  Cmax = 139.2 ff  G =  117  
ABC: Path 20 --    2710 : 4    2 sky130_fd_sc_hd__a211o_2  A =  10.01  Df =5516.3 -417.3 ps  S =  59.3 ps  Cin =  2.4 ff  Cout =   6.8 ff  Cmax = 325.0 ff  G =  281  
ABC: Path 21 --    3199 : 5    2 sky130_fd_sc_hd__a311o_2  A =  11.26  Df =5843.7 -578.8 ps  S =  64.5 ps  Cin =  2.3 ff  Cout =   6.6 ff  Cmax = 298.5 ff  G =  277  
ABC: Path 22 --    3321 : 3    4 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =6079.7 -733.2 ps  S = 225.7 ps  Cin =  4.6 ff  Cout =  16.5 ff  Cmax = 128.2 ff  G =  341  
ABC: Path 23 --    3668 : 5    3 sky130_fd_sc_hd__o311ai_2 A =  16.27  Df =6241.8 -531.0 ps  S = 344.8 ps  Cin =  4.4 ff  Cout =  11.6 ff  Cmax =  82.4 ff  G =  251  
ABC: Path 24 --    3772 : 5    4 sky130_fd_sc_hd__a311oi_2 A =  15.01  Df =6662.3 -738.6 ps  S = 403.0 ps  Cin =  4.3 ff  Cout =  16.5 ff  Cmax =  84.2 ff  G =  357  
ABC: Path 25 --    4073 : 5    3 sky130_fd_sc_hd__o311ai_2 A =  16.27  Df =6824.0 -573.5 ps  S = 266.1 ps  Cin =  4.4 ff  Cout =   6.7 ff  Cmax =  82.4 ff  G =  145  
ABC: Path 26 --    4294 : 5    3 sky130_fd_sc_hd__a2111o_2 A =  12.51  Df =7279.0 -818.7 ps  S =  79.4 ps  Cin =  2.4 ff  Cout =   8.4 ff  Cmax = 324.1 ff  G =  336  
ABC: Path 27 --    4417 : 4    4 sky130_fd_sc_hd__a22oi_2  A =  12.51  Df =7555.7 -988.3 ps  S = 285.9 ps  Cin =  4.3 ff  Cout =  17.9 ff  Cmax = 170.3 ff  G =  405  
ABC: Path 28 --    4613 : 4    3 sky130_fd_sc_hd__a31oi_2  A =  12.51  Df =7735.7 -942.8 ps  S = 244.5 ps  Cin =  4.4 ff  Cout =  13.6 ff  Cmax = 118.1 ff  G =  294  
ABC: Path 29 --    4663 : 5    3 sky130_fd_sc_hd__o41a_2   A =  12.51  Df =8285.2-1250.3 ps  S = 105.7 ps  Cin =  2.4 ff  Cout =  17.9 ff  Cmax = 305.8 ff  G =  720  
ABC: Path 30 --    4690 : 4    2 sky130_fd_sc_hd__o31ai_2  A =  12.51  Df =8609.5-1479.8 ps  S = 303.6 ps  Cin =  4.4 ff  Cout =  11.0 ff  Cmax =  80.6 ff  G =  240  
ABC: Path 31 --    4691 : 2    1 sky130_fd_sc_hd__xor2_2   A =  16.27  Df =8933.6-1610.5 ps  S = 256.3 ps  Cin =  8.6 ff  Cout =  17.6 ff  Cmax = 130.0 ff  G =  205  
ABC: Start-point = pi64 (\P1 [34]).  End-point = po68 ($auto$maccmap.cc:240:synth$2628.Y [44]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  110/   78  lat =    0  nd =  4518  edge =  11246  area =38688.42  delay =35.00  lev = 35
ABC: + write_blif /tmp/yosys-abc-24VoS9/output.blif 

17.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       57
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      126
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:      286
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:      119
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       44
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:      118
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       71
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:      131
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       79
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:      122
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:      127
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      787
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       90
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      140
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      383
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       81
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      319
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       43
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       83
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       65
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:      104
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       51
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:      174
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       67
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       55
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:      366
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       83
ABC RESULTS:        internal signals:     4237
ABC RESULTS:           input signals:      110
ABC RESULTS:          output signals:       78
Removing temp directory.

18. Executing SETUNDEF pass (replace undef values with defined constants).

19. Executing HILOMAP pass (mapping to constant drivers).

20. Executing SPLITNETS pass (splitting up multi-bit signals).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MULTI_32bit..
Removed 104 unused cells and 4995 unused wires.
<suppressed ~140 debug messages>

22. Executing INSBUF pass (insert buffer cells for connected wires).

23. Executing CHECK pass (checking for obvious problems).
Checking module MULTI_32bit...
Warning: Wire MULTI_32bit.\F [31] is used but has no driver.
Warning: Wire MULTI_32bit.\F [30] is used but has no driver.
Warning: Wire MULTI_32bit.\F [29] is used but has no driver.
Warning: Wire MULTI_32bit.\F [28] is used but has no driver.
Warning: Wire MULTI_32bit.\F [27] is used but has no driver.
Warning: Wire MULTI_32bit.\F [26] is used but has no driver.
Warning: Wire MULTI_32bit.\F [25] is used but has no driver.
Warning: Wire MULTI_32bit.\F [24] is used but has no driver.
Warning: Wire MULTI_32bit.\F [23] is used but has no driver.
Warning: Wire MULTI_32bit.\F [22] is used but has no driver.
Warning: Wire MULTI_32bit.\F [21] is used but has no driver.
Warning: Wire MULTI_32bit.\F [20] is used but has no driver.
Warning: Wire MULTI_32bit.\F [19] is used but has no driver.
Warning: Wire MULTI_32bit.\F [18] is used but has no driver.
Warning: Wire MULTI_32bit.\F [17] is used but has no driver.
Warning: Wire MULTI_32bit.\F [16] is used but has no driver.
Warning: Wire MULTI_32bit.\F [15] is used but has no driver.
Warning: Wire MULTI_32bit.\F [14] is used but has no driver.
Warning: Wire MULTI_32bit.\F [13] is used but has no driver.
Warning: Wire MULTI_32bit.\F [12] is used but has no driver.
Warning: Wire MULTI_32bit.\F [11] is used but has no driver.
Warning: Wire MULTI_32bit.\F [10] is used but has no driver.
Warning: Wire MULTI_32bit.\F [9] is used but has no driver.
Warning: Wire MULTI_32bit.\F [8] is used but has no driver.
Warning: Wire MULTI_32bit.\F [7] is used but has no driver.
Warning: Wire MULTI_32bit.\F [6] is used but has no driver.
Warning: Wire MULTI_32bit.\F [5] is used but has no driver.
Warning: Wire MULTI_32bit.\F [4] is used but has no driver.
Warning: Wire MULTI_32bit.\F [3] is used but has no driver.
Warning: Wire MULTI_32bit.\F [2] is used but has no driver.
Warning: Wire MULTI_32bit.\F [1] is used but has no driver.
Warning: Wire MULTI_32bit.\F [0] is used but has no driver.
Found and reported 32 problems.

24. Printing statistics.

=== MULTI_32bit ===

   Number of wires:               4650
   Number of wire bits:           4743
   Number of public wires:         132
   Number of public wire bits:     225
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4677
     sky130_fd_sc_hd__a2111o_2       2
     sky130_fd_sc_hd__a211o_2       57
     sky130_fd_sc_hd__a211oi_2      40
     sky130_fd_sc_hd__a21bo_2       25
     sky130_fd_sc_hd__a21boi_2       5
     sky130_fd_sc_hd__a21o_2       126
     sky130_fd_sc_hd__a21oi_2      286
     sky130_fd_sc_hd__a221o_2      119
     sky130_fd_sc_hd__a221oi_2       3
     sky130_fd_sc_hd__a22o_2        44
     sky130_fd_sc_hd__a22oi_2      118
     sky130_fd_sc_hd__a2bb2o_2      12
     sky130_fd_sc_hd__a311o_2        1
     sky130_fd_sc_hd__a311oi_2       4
     sky130_fd_sc_hd__a31o_2        71
     sky130_fd_sc_hd__a31oi_2       19
     sky130_fd_sc_hd__a32o_2         3
     sky130_fd_sc_hd__and2_2       131
     sky130_fd_sc_hd__and2b_2       79
     sky130_fd_sc_hd__and3_2       122
     sky130_fd_sc_hd__and3b_2        4
     sky130_fd_sc_hd__and4_2       127
     sky130_fd_sc_hd__and4b_2        8
     sky130_fd_sc_hd__and4bb_2       9
     sky130_fd_sc_hd__buf_1        787
     sky130_fd_sc_hd__dfxtp_2      159
     sky130_fd_sc_hd__inv_2         90
     sky130_fd_sc_hd__mux2_2       140
     sky130_fd_sc_hd__nand2_2      383
     sky130_fd_sc_hd__nand2b_2       2
     sky130_fd_sc_hd__nand3_2       81
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nand4_2        7
     sky130_fd_sc_hd__nor2_2       319
     sky130_fd_sc_hd__nor2b_2        1
     sky130_fd_sc_hd__nor3_2        37
     sky130_fd_sc_hd__nor3b_2       16
     sky130_fd_sc_hd__nor4_2         5
     sky130_fd_sc_hd__o211a_2       43
     sky130_fd_sc_hd__o211ai_2      37
     sky130_fd_sc_hd__o21a_2        83
     sky130_fd_sc_hd__o21ai_2       65
     sky130_fd_sc_hd__o21ba_2      104
     sky130_fd_sc_hd__o21bai_2      16
     sky130_fd_sc_hd__o221a_2       51
     sky130_fd_sc_hd__o221ai_2       1
     sky130_fd_sc_hd__o22a_2        14
     sky130_fd_sc_hd__o22ai_2        3
     sky130_fd_sc_hd__o2bb2a_2      23
     sky130_fd_sc_hd__o311a_2        2
     sky130_fd_sc_hd__o311ai_2       2
     sky130_fd_sc_hd__o31a_2         8
     sky130_fd_sc_hd__o31ai_2        2
     sky130_fd_sc_hd__o32a_2         5
     sky130_fd_sc_hd__o41a_2         1
     sky130_fd_sc_hd__or2_2        174
     sky130_fd_sc_hd__or2b_2        67
     sky130_fd_sc_hd__or3_2         55
     sky130_fd_sc_hd__or3b_2        13
     sky130_fd_sc_hd__or4_2          9
     sky130_fd_sc_hd__or4bb_2        7
     sky130_fd_sc_hd__xnor2_2      366
     sky130_fd_sc_hd__xor2_2        83

   Chip area for module '\MULTI_32bit': 42066.595200

25. Executing Verilog backend.
Dumping module `\MULTI_32bit'.

Warnings: 32 unique messages, 32 total
End of script. Logfile hash: 418ea52607, CPU: user 3.99s system 0.12s, MEM: 59.49 MB peak
Yosys 0.12+45 (git sha1 UNKNOWN, gcc 8.3.1 -fPIC -Os)
Time spent: 73% 2x abc (11 sec), 6% 2x write_verilog (0 sec), ...
